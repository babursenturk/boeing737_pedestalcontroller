 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: I2CHW_1INT.asm
 0000           ;;   Version: 1.5, Updated on 2006/06/06 at 13:39:08
 0000           ;;  Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
 0000           ;;
 0000           ;;  DESCRIPTION: I2CHW Master Interrupt Service Routine
 0000           ;;  This is the interrupt seveice routine for the Single Master I2C function.
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress MicroSystems 2000-2006. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 00C0           FLAG_PGMODE_MASK:  equ C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           ; Port 7
 001C           PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
 001D           PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
 001E           PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
 001F           PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;------------------------------------------------
 0000           ;  PMA Data Registers
 0000           ;------------------------------------------------
 0000           
 0040           PMA0_DR:   	  equ 40h		   ; PMA Data Register                        (RW)
 0041           PMA1_DR:   	  equ 41h		   ; PMA Data Register                        (RW)
 0042           PMA2_DR:   	  equ 42h		   ; PMA Data Register                        (RW)
 0043           PMA3_DR:   	  equ 43h		   ; PMA Data Register                        (RW)
 0044           PMA4_DR:   	  equ 44h		   ; PMA Data Register                        (RW)
 0045           PMA5_DR:   	  equ 45h		   ; PMA Data Register                        (RW)
 0046           PMA6_DR:   	  equ 46h		   ; PMA Data Register                        (RW)
 0047           PMA7_DR:   	  equ 47h		   ; PMA Data Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Registers
 0000           ;------------------------------------------------
 0000           
 0048           USB_SOF0:     equ 48h		   ; SOF Frame Number LSB(7:0)                (R)
 0049           USB_SOF1:     equ 49h		   ; SOF Frame Number MSB(10:8)               (R)
 0000           
 004A           USB_CR0:      equ 4Ah		   ; USB Control Register 0                   (RW)
 0080           USB_CR0_ENABLE:       equ 80h    ; MASK: enable/disable USB SIE	          (RW)
 007F           USB_CR0_DEVICE_ADDR:  equ 7Fh    ; MASK: USB Device Address               (RW)
 0000           
 004B           USBIO_CR0:    equ 4Bh		   ; USB IO Control Register 0                (#)
 0080           USBIO_CR0_TEN:        equ 80h    ; MASK: enable/disable manual tx on D+ D-(RW)
 0040           USBIO_CR0_TSE0:       equ 40h    ; MASK: transmit a single ended 0        (RW)
 0020           USBIO_CR0_TD:         equ 20h    ; MASK: transmit J or K state on Bus     (RW)
 0001           USBIO_CR0_RD:         equ 01h    ; MASK: read state of differential rx    (R)
 0000           
 004C           USBIO_CR1:    equ 4Ch		   ; USB IO Control Register 0                (RW)
 0080           USBIO_CR1_IOMODE:     equ 80h    ; MASK: select Bit Bang Mode/USB Mode    (RW)
 0040           USBIO_CR1_DRIVE_MODE: equ 40h    ; MASK: select CMOS mode/Open Drain mode (RW)
 0020           USBIO_CR1_DPI:        equ 20h    ; MASK: drive D+ high/low                (RW)
 0010           USBIO_CR1_DMI:        equ 10h    ; MASK: drive D- high/low                (RW)
 0008           USBIO_CR1_PS2PUEN:    equ 08h    ; MASK: enable/disable 5K Pullup on D+/D-(RW)
 0004           USBIO_CR1_USBPUEN:    equ 04h    ; MASK: enable/disable USB Pullup on D+  (RW)
 0002           USBIO_CR1_DPO:        equ 02h    ; MASK: read D+ pin                      (R)
 0001           USBIO_CR1_DMO:        equ 01h    ; MASK: read D- pin                      (R)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Endpoint Registers
 0000           ;------------------------------------------------
 0000           
 004E           EP1_CNT1:     equ 4Eh		   ; Endpoint 1 Count Register 1              (#)
 0080           EP1_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP1_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP1_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 004F           EP1_CNT:      equ 4Fh		   ; Endpoint 1 Count Register 0              (RW)
 0000           
 0050           EP2_CNT1:     equ 50h		   ; Endpoint 2 Count Register 1              (#)
 0080           EP2_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP2_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP2_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0051           EP2_CNT:      equ 51h		   ; Endpoint 2 Count Register 0              (RW)
 0000           
 0052           EP3_CNT1:     equ 52h		   ; Endpoint 3 Count Register 1              (#)
 0080           EP3_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP3_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP3_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0053           EP3_CNT:      equ 53h		   ; Endpoint 3 Count Register 0              (RW)
 0000           
 0054           EP4_CNT1:     equ 54h		   ; Endpoint 4 Count Register 1              (#)
 0080           EP4_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP4_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP4_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0055           EP4_CNT:      equ 55h		   ; Endpoint 4 Count Register 0              (RW)
 0000           
 0056           EP0_CR:      equ 56h          ; Endpoint 0 Control Register 0            (#)
 0080           EP0_CR_SETUP_RCVD:   equ 80h    ; MASK: Setup received                   (RC)
 0040           EP0_CR_IN_RCVD:      equ 40h    ; MASK: IN received                      (RC)
 0020           EP0_CR_OUT_RCVD:     equ 20h    ; MASK: OUT received                     (RC)
 0010           EP0_CR_ACKD:         equ 10h    ; MASK: Acked transaction                (RC)
 000F           EP0_CR_MODE:         equ 0Fh    ; MASK: Mode response for endpoint       (RW)
 0000           
 0000           ; ------------------------------------------------------------------------------
 0000           ; The following defines are depricated.  Left here for compatibility. 
 0056           EP0_CR0:      equ 56h          ; Endpoint 0 Control Register 0            (#)
 0080           EP0_CR0_SETUP_RCVD:   equ 80h    ; MASK: Setup received                   (RC)
 0040           EP0_CR0_IN_RCVD:      equ 40h    ; MASK: IN received                      (RC)
 0020           EP0_CR0_OUT_RCVD:     equ 20h    ; MASK: OUT received                     (RC)
 0010           EP0_CR0_ACKD:         equ 10h    ; MASK: Acked transaction                (RC)
 000F           EP0_CR0_MODE:         equ 0Fh    ; MASK: Mode response for endpoint       (RW)
 0000           ; ------------------------------------------------------------------------------
 0000           
 0057           EP0_CNT:      equ 57h          ; Endpoint 0 Count Register                (#)
 0080           EP0_CNT_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP0_CNT_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (RC)
 000F           EP0_CNT_BYTE_CNT:    equ 0Fh    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0058           EP0_DR0:      equ 58h          ; Endpoint 0 Data Register 0               (RW)
 0059           EP0_DR1:      equ 59h          ; Endpoint 0 Data Register 1               (RW)
 005A           EP0_DR2:      equ 5Ah          ; Endpoint 0 Data Register 2               (RW)
 005B           EP0_DR3:      equ 5Bh          ; Endpoint 0 Data Register 3               (RW)
 005C           EP0_DR4:      equ 5Ch          ; Endpoint 0 Data Register 4               (RW)
 005D           EP0_DR5:      equ 5Dh          ; Endpoint 0 Data Register 5               (RW)
 005E           EP0_DR6:      equ 5Eh          ; Endpoint 0 Data Register 6               (RW)
 005F           EP0_DR7:      equ 5Fh          ; Endpoint 0 Data Register 7               (RW)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0061           AMUXCFG:      equ 61h          ; Analog Mux Bus Configuration Register    (RW)
 0080           AMUXCFG_BCOL0_MUX:    equ 80h    ; MASK: select AMuxBusB for Col1 input   (RW)
 0040           AMUXCFG_ACOL0_MUX:    equ 40h    ; MASK: select AMuxBusA for Col0 input   (RW)  
 0030           AMUXCFG_INTCAP:       equ 30h    ; MASK: select pins for static operation (RW)
 000E           AMUXCFG_MUXCLK:       equ 0Eh    ; MASK: select precharge clock source    (RW)
 0001           AMUXCFG_EN:           equ 01h    ; MASK: enable/disable MUXCLK            (RW)
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_CLDIS0:       equ 10h    ; MASK: Column 0 comparator bus synch
 0002           CMP_CR1_CLDIX1:       equ 02h    ; MASK: Column 1 comparator bus synch
 0001           CMP_CR1_CLDIX0:       equ 01h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00DF           INT_MSK2:     equ DFh          ; USB Mask Register           (RW)
 0080           INT_MSK2_WAKEUP:           equ 80h ; MASK: enable/disable I2C interrupt
 0040           INT_MSK2_EP4:              equ 40h ; MASK: enable/disable SW interrupt
 0020           INT_MSK2_EP3:              equ 20h ; MASK: enable/disable I2C interrupt
 0010           INT_MSK2_EP2:              equ 10h ; MASK: enable/disable SW interrupt
 0008           INT_MSK2_EP1:              equ 08h ; MASK: enable/disable I2C interrupt
 0004           INT_MSK2_EP0:              equ 04h ; MASK: enable/disable SW interrupt
 0002           INT_MSK2_SOF:              equ 02h ; MASK: enable/disable I2C interrupt
 0001           INT_MSK2_BUS_RESET:        equ 01h ; MASK: enable/disable SW interrupt
 0000           
 00E0           INT_MSK0:     equ E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Control Registers
 00E4           DEC_DH:       equ E4h          ; Data High Register                       (RW)
 00E5           DEC_DL:       equ E5h          ; Data Low Register                        (RW)
 00E6           DEC_CR0:      equ E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  MAC Registers
 0000           ;------------------------------------------------------
 0000           
 00E8           MUL0_X:       equ E8h          ; Multiply Input X Register                (W)
 00E9           MUL0_Y:       equ E9h          ; Multiply Input Y Register                (W)
 00EA           MUL0_DH:      equ EAh          ; Multiply Result High Byte Register       (R)
 00EB           MUL0_DL:      equ EBh          ; Multiply Result Low Byte Register        (R)
 0000           
 00EC           ACC0_DR1:     equ ECh          ; Accumulator Data Register 1              (RW)
 00ED           ACC0_DR0:     equ EDh          ; Accumulator Data Register 0              (RW)
 00EE           ACC0_DR3:     equ EEh          ; Accumulator Data Register 3              (RW)
 00EF           ACC0_DR2:     equ EFh          ; Accumulator Data Register 2              (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FD           DAC_D:        equ FDh		   ; DAC Data Register                        (RW)
 0000           
 00FE           CPU_SCR1:     equ FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 7
 001C           PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
 001D           PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
 001E           PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
 001F           PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  PMA Write and Read Registers
 0000           ;------------------------------------------------
 0000           
 0040           PMA0_WA:   	  equ 40h		   ; PMA Write Pointer Register               (RW)
 0041           PMA1_WA:   	  equ 41h		   ; PMA Write Pointer Register               (RW)
 0042           PMA2_WA:   	  equ 42h		   ; PMA Write Pointer Register               (RW)
 0043           PMA3_WA:   	  equ 43h		   ; PMA Write Pointer Register               (RW)
 0044           PMA4_WA:   	  equ 44h		   ; PMA Write Pointer Register               (RW)
 0045           PMA5_WA:   	  equ 45h		   ; PMA Write Pointer Register               (RW)
 0046           PMA6_WA:   	  equ 46h		   ; PMA Write Pointer Register               (RW)
 0047           PMA7_WA:   	  equ 47h		   ; PMA Write Pointer Register               (RW)
 0000           
 0050           PMA0_RA:   	  equ 50h		   ;  PMA Read Pointer Register               (RW)
 0051           PMA1_RA:   	  equ 51h		   ;  PMA Read Pointer Register               (RW)
 0052           PMA2_RA:   	  equ 52h		   ;  PMA Read Pointer Register               (RW)
 0053           PMA3_RA:   	  equ 53h		   ;  PMA Read Pointer Register               (RW)
 0054           PMA4_RA:   	  equ 54h		   ;  PMA Read Pointer Register               (RW)
 0055           PMA5_RA:   	  equ 55h		   ;  PMA Read Pointer Register               (RW)
 0056           PMA6_RA:   	  equ 56h		   ;  PMA Read Pointer Register               (RW)
 0057           PMA7_RA:   	  equ 57h		   ;  PMA Read Pointer Register               (RW)
 0000           
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus 0/1 To Global Out Enable  (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0065           CMP_GO_EN1:   equ 65h          ; Comparator Bus 2/3 To Global Out Enable  (RW)
 0080           CMP_GO_EN1_GOO7:      equ 80h    ; MASK: Selected Col 3 signal to GOO5
 0040           CMP_GO_EN1_GOO3:      equ 40h    ; MASK: Selected Col 3 signal to GOO1
 0030           CMP_GO_EN1_SEL3:      equ 30h    ; MASK: Column 3 Signal Select
 0008           CMP_GO_EN1_GOO6:      equ 08h    ; MASK: Selected Col 2 signal to GOO4
 0004           CMP_GO_EN1_GOO2:      equ 04h    ; MASK: Selected Col 2 signal to GOO0
 0003           CMP_GO_EN1_SEL2:      equ 03h    ; MASK: Column 2 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Registers
 0000           ;------------------------------------------------
 0000           
 00C1           USB_CR1:      equ C1h          ; USB Control Register 1                   (#)
 0004           USB_CR1_BUS_ACTIVITY: equ 04h    ; MASK: monitors activity on USB bus     (RC)
 0002           USB_CR1_ENABLE_LOCK:  equ 02h    ; MASK: enable/disable auto lock of osc  (RW)
 0001           USB_CR1_REG_ENABLE:   equ 01h    ; MASK: set mode to reg. on/pass thru    (RW)
 0000           
 00C4           EP1_CR0:      equ C4h          ; EP1 Control Register 0                   (#)
 0080           EP1_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP1_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP1_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP1_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C5           EP2_CR0:      equ C5h          ; EP2 Control Register 0                   (#)
 0080           EP2_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP2_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP2_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP2_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C6           EP3_CR0:      equ C6h          ; EP3 Control Register 0                   (#)
 0080           EP3_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP3_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP3_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP3_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C7           EP4_CR0:      equ C7h          ; EP4 Control Register 0                   (#)
 0080           EP4_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP4_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP4_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP4_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  AMuxBus Mux Control Registers
 0000           ;------------------------------------------------
 0000           
 00D8           MUX_CR0:      equ D8h          ; Analog Mux Bus Port 0 Bit Enables Reg    (RW)
 00D9           MUX_CR1:      equ D9h          ; Analog Mux Bus Port 1 Bit Enables Reg    (RW)
 00DA           MUX_CR2:      equ DAh          ; Analog Mux Bus Port 2 Bit Enables Reg    (RW)
 00DB           MUX_CR3:      equ DBh          ; Analog Mux Bus Port 3 Bit Enables Reg    (RW)
 00EC           MUX_CR4:      equ ECh          ; Analog Mux Bus Port 4 Bit Enables Reg    (RW)
 00ED           MUX_CR5:      equ EDh          ; Analog Mux Bus Port 5 Bit Enables Reg    (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E7           DEC_CR2:      equ E7h          ; Data Control Register 2                  (RW)
 0000           
 00E8           IMO_TR:               equ E8h    ; Internal Main Oscillator Trim Register   (RW)
 00E9           ILO_TR:               equ E9h    ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:               equ EAh    ; Band Gap Trim Register                   (RW)
 00EB           ECO_TR:               equ EBh    ; External Oscillator Trim Register        (W)
 00EF           IMO_TR2:              equ EFh    ; Internal Main Oscillator Gain Trim Register (RW)
 0000           
 00FD           DAC_CR:       equ FDh          ; DAC Control Register                     (RW)
 0080           DAC_CR_SPLIT_MUX:     equ 80h    ; MASK: enable/disable Splitting of AMuxBuses
 0040           DAC_CR_MUXCLK_GE:     equ 40h    ; MASK: Connect/Disconnect AMuxBus to GOO[6]
 0008           DAC_CR_RANGE:	       equ 08h    ; MASK: High Range/Low Range
 0006           DAC_CR_OSCMODE:	    equ 06h    ; MASK: Sets Reset Mode for AMuxBus
 0001           DAC_CR_ENABLE:        equ 01h    ; MASK: enable/disable AMux Bus
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0003           SYSTEM_STACK_PAGE: equ 3   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0001           SYSTEM_LARGE_MEMORY_MODEL: equ 1   
 0000           SYSTEM_SMALL_MEMORY_MODEL: equ 0   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C24x94 and CY8C29x66.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           
 0000           ;  ******* Page Pointer Manipulation Macros *******
 0000           ;
 0000           ;  Most of the following macros are conditionally compiled so they only
 0000           ;  produce code if the large memory model is selected.
 0000           
 0000              ;-----------------------------------------------
 0000              ;  Set Stack Page Macro
 0000              ;-----------------------------------------------
 0000              ;
 0000              ;  DESC: Modify STK_PP in the large or small memory Models.
 0000              ;
 0000              ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
 0000              ;        which stack operations like PUSH and POP store and retrieve their
 0000              ;        data
 0000              ;
 0000              ;  COST: 8 instruction cycles (in LMM only)
 0000           
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 00DE           I2CHW_1_INT_REG:                           equ 0x0de
 0001           I2CHW_1_INT_MASK:                          equ 0x01
 0000           
 0000           
 0000           
 0000           ;-----------------
 0000           ; Misc. equates
 0000           ;-----------------
 0000           
 0000           ;I2CHW_1_RsrcStatus byte, Status Bit definitions
 0001           I2CHW_RD_NOERR:                             equ 0x1   ;read completed without errors
 0002           I2CHW_RD_OVERFLOW:                          equ 0x2   ;master read more bytes than were contained in read buffer
 0004           I2CHW_RD_COMPLETE:                          equ 0x4   ;last read transaction complete
 0008           I2CHW_READFLASH:                            equ 0x8   ;set- next read will use flash read buffer, clear- next read will use ram read buffer
 0010           I2CHW_WR_NOERR:                             equ 0x10  ;write completed without errors
 0020           I2CHW_WR_OVERFLOW:                          equ 0x20  ;received bytes exceeded write buffer length
 0040           I2CHW_WR_COMPLETE:                          equ 0x40  ;Master uses this definition, slave uses that below.
 0040           I2CHW_ISR_NEW_ADDR:                         equ 0x40  ;New addre received (can infer that previous transaction is complete)
 0080           I2CHW_ISR_ACTIVE:                           equ 0x80  ;ISR for I2C_slave is is active
 0000           
 0000           
 0004           fI2C_NAKnextWr:                             equ 0x04  ;flag to tell slave to nak next byte from master
 0000           
 0000           
 0000           ;=== I2C equates ===
 0000           
 0000           
 0000           
 00D7           I2CHW_1_SCR:    equ d7h;:        equ 0xd7 ;Slave SCR register location bank 0
 0000           
 0080           I2CM_BUSERR:    equ 0x80
 0040           I2CM_LOSTARB:   equ 0x40
 0020           I2C_STOP_ST:    equ 0x20
 0010           I2C_ACKOUT:     equ 0x10
 0008           I2C_ADDRIN:     equ 0x08
 0004           I2C_TX:         equ 0x04 ;compliment is RX
 0002           I2C_LST_BIT:    equ 0x02
 0001           I2C_BYTE_COMPL: equ 0x01
 0000           
 00D6           I2CHW_1_CFG:    equ d6h;:        equ 0xd6 ;I2C CFG register location bank 0
 0000           
 0020           I2C_BUSERRIE:   equ 0x20
 0010           I2C_STOPIE:     equ 0x10
 0008           I2C_CLKR1:      equ 0x08
 0004           I2C_CLKR0:      equ 0x04
 0002           I2C_M_EN:       equ 0x02
 0001           I2C_S_EN:       equ 0x01
 0000           
 00D9           I2CHW_1_MSCR:   equ d9h;:       equ 0xd9 ;Master SCR register location bank 0
 0000           
 0008           I2CM_BUSBUSY:   equ 0x08
 0004           I2CM_MASTEROP:  equ 0x04
 0002           I2CM_RESTRT:    equ 0x02
 0001           I2CM_SNDSTRT:   equ 0x01
 0000           
 00D8           I2CHW_1_DR: equ d8h;:         equ 0xd8 ;I2C DATA register location bank 0
 0000           
 0000           
 0000           ;Equates used as conditional compile keys
 0000           
 0000           
 0001           I2CHW_1_READ_BUFTYPE:                       equ 0x1
 0000           
 0001           I2CHW_1_READ_FLASH:                         equ I2CHW_1_READ_BUFTYPE & 0x01
 0000           
 0000           I2CHW_1_24MHZ_FIX:                          equ 0x0
 0000           
 0000           I2CHW_1_THROTTLE_CLK_RATE:                  equ I2CHW_1_24MHZ_FIX & 0x01
 0000           
 0000           I2CHW_1_POLLING_ENABLE:                     equ 0x0
 0000           
 0000           I2CHW_1_POLLED_PROCESS:                     equ I2CHW_1_POLLING_ENABLE & 0x01
 0000           
 0000           ;I2C_(status and control) reg write macro
 0000           ;----------------------------------------------------
 0000           ;  I2C_SCR and I2C_MSCR reg write macro
 0000           ;
 0000           ;  Use the following macros to write to the I2C_SCR register
 0000           ;  Usage:    SetI2C_MSCR WRITE_VALUE
 0000           ;            SetI2C_SCR  WRITE_VALUE
 0000           ;            SetI2C_CFG  WRITE_VALUE
 0000           ;
 0000           ;  where WRITE_VALUE is the data to be writen
 0000           ;
 0000           ;----------------------------------------------------
 0000           ; Write to the  I2CHW_1_SCR register
 0000           ;
 0000               macro SetI2CHW_1_SCR
 0000           
 0000           IF I2CHW_1_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  X
 0000                   mov   X, A                        ; if data for I2C_SCR was in A save it in X
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x1
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if the operation uses data in A get it out of X
 0000                   mov   reg[0xD7], @0               ; write data to reg[I2C_SCR]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if A was data restore it from X now
 0000                   pop   X                           ; restore original accumulator
 0000           ELSE
 0000                   mov   reg[0xD7], @0               ; write data to reg[I2C_SCR]
 0000           ENDIF
 0000               macro SetI2CHW_1_MSCR
 0000           
 0000           IF I2CHW_1_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  X
 0000                   mov   X, A                        ; if data for I2C_SCR was in A save it in X
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x01
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if the operation uses data in A get it out of X
 0000                   mov   reg[0xD9], @0               ; write data to reg[I2C_MSCR]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if A was data restore it from X now
 0000                   pop   X                           ; restore original accumulator
 0000           ELSE
 0000                   mov   reg[0xD9], @0               ; write data to reg[I2C_MSCR]
 0000           ENDIF
 0000               macro BitSetI2CHW_1_CFG
 0000           
 0000           IF I2CHW_1_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  A
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x02
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 12Mhz
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   or    reg[0xD6], @0               ; write data to reg[I2C_CFG]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   pop   A                           ; restore original accumulator
 0000           ELSE
 0000                   or    reg[0xD6], @0               ; write data to reg[I2C_CFG]
 0000           ENDIF
 0000               macro BitClrI2CHW_1_CFG
 0000           
 0000           IF I2CHW_1_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK                    ; set bank1
 0000                   push  A
 0000                   mov   A, reg[OSC_CR0]                     ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x02
 0000                   mov   reg[OSC_CR0], A                     ; throttle the clock down to 12Mhz
 0000                   and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                   and   reg[0xD6], ~@0                      ; write data to reg[I2C_CFG]
 0000                   or    F, FLAG_XIO_MASK                    ; set bank1
 0000                   pop   A                                   ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                   pop   A                                   ; restore original accumulator
 0000           ELSE
 0000                   and   reg[0xD6], ~@0                      ; write data to reg[I2C_CFG]
 0000           ENDIF
 0000               macro I2CHW_1_SERVICE_RETURN
 0000           
 0000           IF I2CHW_1_POLLED_PROCESS
 0000                   ret                                       ; NOT and ISR so use only a ret to return from poll
 0000           ELSE    
 0000                   reti                                      ; use reti to return from ISR
 0000           ENDIF
 0000               macro I2CHW_1_POLL_SERVICE
 0000           
 0000           IF I2CHW_1_POLLED_PROCESS
 0000                   lcall  I2CHW_1_Poll              ; Call this function repeatedly if we are in a loop
 0000                                                                     ; waiting for bStatus BUS_BUSY to clear.  Otherwise
 0000                                                                                                             ; this is a deadlock condtion
 0000           ENDIF
 0001           I2CHW_1_READ:           equ  0x01 ; Set the R/W flag after the slave address.
 0000           I2CHW_1_WRITE:          equ  0x00 ; Clear the R/W flag after the slave address.
 0000           I2CHW_1_XFER_ERROR:     equ  0x00 ; Slave did not ACK
 0000           
 0000           I2CHW_1_CompleteXfer:   equ  0x00 ; Perform a complete I2C transfer
 0001           I2CHW_1_RepStart:       equ  0x01 ; Perform a complete transfer with a Repeat Start
 0002           I2CHW_1_NoStop:         equ  0x02 ; Perform a complete transfer, but leave off the stop.
 0000           
 0000           I2CHW_1_NAKslave:       equ  0x00 ; NAK the slave after a read
 0001           I2CHW_1_ACKslave:       equ  0x01 ; ACK the slave after a read
 0000           
 0000           ; end of file I2CHW_1.inc
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global Symbols
 0000           ;-----------------------------------------------
 0000           
                export     I2CHW_1_Read_Count
                export    _I2CHW_1_Read_Count
                export     I2CHW_1_Write_Count
                export    _I2CHW_1_Write_Count
                
                export    pI2CHW_1_Read_BufLO
                export   _pI2CHW_1_Read_BufLO
                export    pI2CHW_1_Write_BufLO
                export   _pI2CHW_1_Write_BufLO
                export    I2CHW_1_RsrcStatus
                export   _I2CHW_1_RsrcStatus
                export    I2CHW_1_SlaveAddr
                export   _I2CHW_1_SlaveAddr
                
                ;-----------------------------------------------
                ; WARNING: The variables below are deprecated
                ; and have been replaced with Read_BufLO
                ; and Write_BufLO
                ;-----------------------------------------------
                export    pI2CHW_1_Read_Buf
                export   _pI2CHW_1_Read_Buf
                export    pI2CHW_1_Write_Buf
                export   _pI2CHW_1_Write_Buf
                ;-----------------------------------------------
                ; END WARNING
                ;-----------------------------------------------
                 
                area InterruptRAM(RAM, REL, CON)
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                
 0000             I2CHW_1_SlaveAddr:
 0000            _I2CHW_1_SlaveAddr:                         blk      1
 0001             I2CHW_1_RsrcStatus:
 0001            _I2CHW_1_RsrcStatus:                        blk     1
 0002             I2CHW_1_Write_Count:
 0002            _I2CHW_1_Write_Count:                       blk    1
                IF SYSTEM_LARGE_MEMORY_MODEL
                export    pI2CHW_1_Write_BufHI
                export   _pI2CHW_1_Write_BufHI
                
 0003            pI2CHW_1_Write_BufHI:
 0003           _pI2CHW_1_Write_BufHI:                       blk     1
                ENDIF
                ;-----------------------------------------------
                ; WARNING: The variable below is deprecated
                ; and has been replaced Write_BufLO
                ;-----------------------------------------------
 0004            pI2CHW_1_Write_Buf:
 0004           _pI2CHW_1_Write_Buf:
 0004           ;-----------------------------------------------
 0004           ; END WARNING
 0004           ;-----------------------------------------------
 0004            pI2CHW_1_Write_BufLO:
 0004           _pI2CHW_1_Write_BufLO:                       blk      1
 0005           
                IF I2CHW_1_READ_FLASH
                export    pI2CHW_1_Read_BufHI
                export   _pI2CHW_1_Read_BufHI
                
 0005            pI2CHW_1_Read_BufHI:
 0005           _pI2CHW_1_Read_BufHI:                        blk     1
                ELSE
                IF SYSTEM_LARGE_MEMORY_MODEL
                export    pI2CHW_1_Read_BufHI
                export   _pI2CHW_1_Read_BufHI
                
                 pI2CHW_1_Read_BufHI:
                _pI2CHW_1_Read_BufHI:                        blk     1
                ENDIF
                ENDIF
                
                ;-----------------------------------------------
                ; WARNING: The variable below is deprecated
                ; and has been replaced Read_BufLO
                ;-----------------------------------------------
 0006            pI2CHW_1_Read_Buf:
 0006           _pI2CHW_1_Read_Buf:
 0006           ;-----------------------------------------------
 0006           ; END WARNING
 0006           ;-----------------------------------------------
 0006            pI2CHW_1_Read_BufLO:
 0006           _pI2CHW_1_Read_BufLO:                        blk       1
 0007           
                IF I2CHW_1_READ_FLASH
                export    I2CHW_1_Read_CountHI
                export   _I2CHW_1_Read_CountHI
                
 0007            I2CHW_1_Read_CountHI:
 0007           _I2CHW_1_Read_CountHI:                       blk    1
                ENDIF
                
 0008            I2CHW_1_Read_Count:
 0008           _I2CHW_1_Read_Count:                         blk      1
 0009           
 0009           ;@PSoC_UserCode_INIT@ (Do not change this line.)
 0009           ;---------------------------------------------------
 0009           ; Insert your custom declarations below this banner
 0009           ;---------------------------------------------------
 0009           
 0009           ;------------------------
 0009           ; Includes
 0009           ;------------------------
 0009           
 0009                   
 0009           ;------------------------
 0009           ;  Constant Definitions
 0009           ;------------------------
 0009           
 0009           
 0009           ;------------------------
 0009           ; Variable Allocation
 0009           ;------------------------
 0009           
 0009           
 0009           ;---------------------------------------------------
 0009           ; Insert your custom declarations above this banner
 0009           ;---------------------------------------------------
 0009           ;@PSoC_UserCode_END@ (Do not change this line.)
 0009           
 0009           
 0009           
                AREA UserModules (ROM, REL)
                
                
                export _I2CHW_1_ISR
                ;;****************************************************
                ;; I2C_MASTER  main entry point from vector 60h
                ;;
                ;;****************************************************
                
                
 0000           _I2CHW_1_ISR:
 0000 08            push A
 0001 10            push X
                IF SYSTEM_LARGE_MEMORY_MODEL
 0002 5DD3         mov   A, reg[ IDX_PP ]
 0004 08           push  A
                ENDIF
                ;;==============================================================
                ;* Master only
                    ;here we shouldn't have to worry about arbitration, and not much about bus errors.
                    ;On the other hand there's no way to tell the difference between Single Master mode
                    ; and multi-Master mode.  So when Master mode is set, we may or may not need to do
                    ; arbitration.  This could be an equate in the User Module possibly.
                ;;==============================================================
                
                    ;
                    ; stop trap is not recommendede becaus the stop bit cannot be cleared.  User may choose to enable
                        ; it however
                        ; Add code to handle stop condition here
                        ;
 0005 49D708        tst reg[I2CHW_1_SCR], I2C_ADDRIN
 0008 A018          jz DataState
 000A               ;test for a start condition sent out, or bus error, ack from slave, or (lost arb & addr)
 000A           AddrState:
 000A 49D901        tst reg[I2CHW_1_MSCR], I2CM_SNDSTRT
 000D B02F          jnz NoStart
 000F 49D702        tst reg[I2CHW_1_SCR], ( I2C_LST_BIT )                  ;must be a zero or no slave answered
 0012 B01E          jnz SlaveAddrNAK
 0014                                                                      ;slave must have acked here
 0014                                                                      ;here there needs to be some external state maintained by the Master that tells the
 0014                                                                      ;isr to transmit or to receive since it is in control.
 0014           
 0014 470001        tst [I2CHW_1_SlaveAddr], 01                            ;bit 0 = 1 then read (from slave and put it in RAM,
 0017                                                                      ;bit 0 = 0 then write to slave and get it from RAM or Flash
 0017 B02E          jnz I2C_ReadSlave1stByte                               ;bit 0 was 1
 0019           
 0019           
 0019 80A7          jmp I2C_WriteSlave1stByte                              ;bit 0 was 0
                IF SYSTEM_LARGE_MEMORY_MODEL
 001B 18           pop   A
 001C 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 001E 20            pop X
 001F 18            pop A
 0020 7E            reti
 0021           
 0021           
 0021           DataState:
 0021 2E0180            or [I2CHW_1_RsrcStatus], I2CHW_ISR_ACTIVE
 0024 470001        tst [I2CHW_1_SlaveAddr], 01                            ;bit 0 = 1 then read, bit 0 = 0 then write
 0027 B02D          jnz I2C_ReadSlave                                      ;bit 0 was 1
 0029           
 0029               ;test the [I2CHW_1_Write_Count] for a value of zero meaning were done and we shouldn't transmit another byte
 0029               ;merely return without doing anything, the foreground will generate a stop and figure out what
 0029               ;to do next
 0029           
 0029                   ;;
 0029               ;;the buffer routine take care of deciding about how many bytes are left so I don't need to worry about it here
 0029               ;;
 0029           StillDataToWrite:
 0029 809D          jmp I2C_WriteSlave                                     ;bit 0 was 0
                IF SYSTEM_LARGE_MEMORY_MODEL
 002B 18           pop   A
 002C 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 002E 20            pop X
 002F 18            pop A
 0030 7E            reti
 0031           
 0031           
 0031           SlaveAddrNAK:
 0031               ;;
 0031               ;; all there is to do here is to return, the slave didn't respond so it's not there or needs
 0031                   ;; to be tried later.
 0031               ;;
 0031           ;@PSoC_UserCode_BODY4@ (Do not change this line.)
 0031           ;---------------------------------------------------
 0031           ; Insert your custom code below this banner
 0031           ; to modify the way a NAK from a slave is handled
 0031           ; possibly set a user defined status
 0031           ;---------------------------------------------------
 0031           
 0031           ;********************************************************
 0031           ; End user I2C Buffered WRITE (to RAM) Customization
 0031           ;********************************************************
 0031           ;@PSoC_UserCode_END@ (Do not change this line.)
 0031           ;
 0031           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 0031           ;
                IF I2CHW_1_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[0xD7], 0               ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0031 62D700            mov   reg[0xD7], 0               ; write data to reg[I2C_SCR]
                ENDIF
                
                
 0034 26017F        and [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
 0037           
                IF SYSTEM_LARGE_MEMORY_MODEL
 0037 18           pop   A
 0038 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 003A 20            pop X
 003B 18            pop A
 003C 7E            reti
 003D           
 003D           NoStart:
 003D               ;here might test loss of arbitration and the presence of an address bit indicating that the
 003D               ;Master is being addressed as a slave.
 003D                   ;;
 003D                   ;; there may be a need to indicate that there was a Master transmission
 003D                   ;; failure or an unsuccessful attempt...
 003D                   ;;
 003D 26017F            and [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
                IF SYSTEM_LARGE_MEMORY_MODEL
 0040 18           pop   A
 0041 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 0043 20            pop X
 0044 18            pop A
 0045 7E            reti
 0046           
 0046           I2C_ReadSlave1stByte:
 0046 2E0180            or [I2CHW_1_RsrcStatus], I2CHW_ISR_ACTIVE
 0049 2601FB            and [I2CHW_1_RsrcStatus], ~I2CHW_RD_COMPLETE
 004C           
 004C           ;read normal data in from slave immediately after the address is sent, there is no data to read
 004C           ;but the bus is stalled at byte complete
 004C           
 004C           ;
 004C           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 004C           ;
                IF I2CHW_1_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[0xD7], 0               ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 004C 62D700            mov   reg[0xD7], 0               ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
 004F 18           pop   A
 0050 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 0052 20            pop X
 0053 18            pop A
 0054 7E            reti
 0055           
 0055           I2C_ReadSlave:                                             ;this is just a normal read
 0055           
 0055           
 0055           ;;code snipped from old SW I2C below
 0055           ;
 0055           ; MASTER READ from SLAVE
 0055           ; (and writing to it's own RAM--Write_Buf and Write_Cnt)
 0055           ;
 0055           ;@PSoC_UserCode_BODY1_V1.2@ (Do not change this line.)
 0055           ;---------------------------------------------------
 0055           ; Insert your custom code below this banner
 0055           ;---------------------------------------------------
 0055           
 0055           ;********************************************************
 0055           ; By modifying the section from here down to the next comment block
 0055           ; a user could process data for a custom I2C Master Read (write to RAM) application
 0055           ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
 0055           ;********************************************************
 0055 470004       tst   [I2CHW_1_bStatus], fI2C_NAKnextWr
 0058 B014         jnz   InStoreData
 005A              ;
 005A              ;process write data here
 005A              ;
 005A 7A02         dec   [I2CHW_1_Write_Count]
 005C C04F         jc    CompleteRDXfer                                              ; carry set if value became -1
 005E              ;jz    InStoreData                                                                                             ;In theory overflow cant happen but stop the transaction anyway.
 005E 3C0200       cmp   [I2CHW_1_Write_Count], 00                                   ;set nak flag, dec count, and store data
 0061 A003         jz    InNakNextByte
 0063 8006         jmp   InNotBufEnd
 0065           InNakNextByte:                                                       ;set the nakflag in I2CHW_1_bStatus
 0065 2E0004       or    [I2CHW_1_bStatus], fI2C_NAKnextWr
 0068 8004         jmp   InStoreData
 006A           InNotBufEnd:
 006A 2600FB       and   [I2CHW_1_bStatus], ~fI2C_NAKnextWr                          ;clear the nak flag in case it was set from a previous operation
 006D           InStoreData:
 006D              ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
 006D 2E0110       or    [I2CHW_1_RsrcStatus], I2CHW_WR_NOERR                        ;set current status
                IF SYSTEM_LARGE_MEMORY_MODEL
 0070 5103         mov   A, [pI2CHW_1_Write_BufHI]
                ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0072 60D3            mov reg[IDX_PP], A
                   ENDIF
 0074 5804         mov   X, [pI2CHW_1_Write_BufLO]
 0076 5DD8         mov   A, reg[I2CHW_1_DR]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0078 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 007A 7180            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
 007C 5400         mov   [X], A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 007E 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0080 7100            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_00b
                   ENDIF
 0082 7604         inc   [pI2CHW_1_Write_BufLO]
 0084           
 0084 470004       tst   [I2CHW_1_bStatus], fI2C_NAKnextWr
 0087 B00A         jnz   NAK_this_one
 0089           
 0089           ;********************************************************
 0089           ; End user I2C Buffered WRITE (to RAM) Customization
 0089           ;********************************************************
 0089           ;@PSoC_UserCode_END@ (Do not change this line.)
 0089           ;;code snipped form SW I2C to maintain api compatibility above
 0089           
 0089           ;
 0089           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 0089           ;
                IF I2CHW_1_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[0xD7], I2C_ACKOUT               ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0089 62D710            mov   reg[0xD7], I2C_ACKOUT               ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
 008C 18           pop   A
 008D 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 008F 20            pop X
 0090 18            pop A
 0091 7E            reti
 0092           
 0092           NAK_this_one:
 0092           
 0092 2600FB        and  [I2CHW_1_bStatus], ~fI2C_NAKnextWr
 0095           
 0095                   ; *****
 0095                   ; here we may need to look at the mode that this was called under
 0095                   ; what does the user want done on the last byte.  Could be a send restart...
 0095                   ; ******
 0095 2601F8        and   [I2CHW_1_RsrcStatus], ~0x07                                ;clear the read status bits
 0098 2E0101        or    [I2CHW_1_RsrcStatus], I2CHW_RD_NOERR
 009B 2E0104        or    [I2CHW_1_RsrcStatus], I2CHW_RD_COMPLETE
 009E           
 009E 260003            and [I2CHW_1_bStatus], (I2CHW_1_RepStart | I2CHW_1_NoStop)
 00A1 A00A              jz      CompleteRDXfer
 00A3 26017F            and   [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
                IF SYSTEM_LARGE_MEMORY_MODEL
 00A6 18           pop   A
 00A7 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 00A9 20            pop X
 00AA 18            pop A
 00AB 7E                reti
 00AC                   ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
 00AC                   ;The NAK (not I2C_SNDACK) bit in I2C_SCR below will automatically generate a stop
 00AC           
 00AC           CompleteRDXfer:
 00AC           
 00AC           ;
 00AC           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 00AC           ;
                IF I2CHW_1_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[0xD7], 0               ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 00AC 62D700            mov   reg[0xD7], 0               ; write data to reg[I2C_SCR]
                ENDIF
                
                
 00AF 26017F        and   [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
                IF SYSTEM_LARGE_MEMORY_MODEL
 00B2 18           pop   A
 00B3 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 00B5 20            pop X
 00B6 18            pop A
 00B7 7E            reti                                                             ;return and wait for the next interrupt (on data)
 00B8           
 00B8           
 00B8           AckTheRead:
 00B8           
 00B8           ;
 00B8           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 00B8           ;
                IF I2CHW_1_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[0xD7], I2C_ACKOUT               ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 00B8 62D710            mov   reg[0xD7], I2C_ACKOUT               ; write data to reg[I2C_SCR]
                ENDIF
                
                IF SYSTEM_LARGE_MEMORY_MODEL
 00BB 18           pop   A
 00BC 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 00BE 20            pop X
 00BF 18            pop A
 00C0 7E            reti
 00C1           
 00C1           
 00C1           I2C_WriteSlave1stByte:
 00C1           ;write normal data to slave
 00C1 2601BF            and [I2CHW_1_RsrcStatus], ~I2CHW_WR_COMPLETE
 00C4 2E0180            or [I2CHW_1_RsrcStatus], I2CHW_ISR_ACTIVE
 00C7           
 00C7           
 00C7           I2C_WriteSlave:
 00C7           
 00C7 49D702        tst reg[I2CHW_1_SCR], ( I2C_LST_BIT )                  ;must be a zero or no slave answered
 00CA B068          jnz SlaveDataNAK
 00CC 5004              mov A, (I2C_TX)
 00CE 08                push A
 00CF           
 00CF           
 00CF           
 00CF           ;
 00CF           ;MASTER is WRITING TO SLAVE (& reading data from ram or flash buffer)
 00CF           ;
 00CF           ;;code snipped from SW I2C below
 00CF           
 00CF           I2C_ObtainOutData:
 00CF           
 00CF           
 00CF           ;********************************************************
 00CF           ; here we need to get the next data to output (master-read)
 00CF           ; also set the status byte for use on exit
 00CF           ;********************************************************
                IF I2CHW_1_READ_FLASH
                ;@PSoC_UserCode_BODY2_V1.2@ (Do not change this line.)
                ;---------------------------------------------------
                ; Insert your custom code below this banner
                ; to modify the way a master might read non-volitile data
                ; to send.
                ;---------------------------------------------------
                
 00CF 470108        tst  [I2CHW_1_RsrcStatus],I2CHW_READFLASH
 00D2 A018          jz   ReadOutData
 00D4           
 00D4               ;
 00D4               ;get the data
 00D4               ;
 00D4 5806          mov  X, [pI2CHW_1_Read_BufLO]
 00D6 5105          mov  A, [pI2CHW_1_Read_BufHI]
 00D8 28            romx
 00D9 60D8          mov  reg[I2CHW_1_DR],A
 00DB 7A08          dec  [I2CHW_1_Read_Count]                                        ;calc addr lsb
 00DD D005          jnc  NoDecHighCount
 00DF 7A07          dec  [I2CHW_1_Read_CountHI]
 00E1           
 00E1 C02C          jc   MstrWRComplete
 00E3           
 00E3           NoDecHighCount:
 00E3           
 00E3 7606          inc  [pI2CHW_1_Read_BufLO]                                       ;set the next flash address to read
 00E5 D003          jnc  NoIncHiAddr
 00E7 7605          inc  [pI2CHW_1_Read_BufHI]
 00E9           NoIncHiAddr:
 00E9 801B         jmp   I2CNormalOutput
 00EB           ;
 00EB           ;****** THERE SHOULD BE NO WAY TO REACH THIS STATE WE'LL JUST TERMINATE THE ACTIVITY SINCE WERE THE MASTER
 00EB           ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
 00EB           ;
 00EB           ;FlashRdOverflow:
 00EB               ;deal with the over flow cond by resending last data byte (dec the low addr)
 00EB           
 00EB           ;   or    [I2CHW_1_RsrcStatus], I2CHW_RD_OVERFLOW
 00EB           ;                                                                      ;set count back to 0
 00EB           ;   mov   [I2CHW_1_Read_CountHI], 0                                  ;functionally the same as incrementing ffff and less instructions
 00EB           ;   mov   [I2CHW_1_Read_Count], 0
 00EB           ;   jmp   I2CNormalRead
 00EB           
 00EB           ;---------------------------------------------------
 00EB           ; Insert your custom code above this banner
 00EB           ;---------------------------------------------------
 00EB           ;@PSoC_UserCode_END@ (Do not change this line.)
 00EB           
                ENDIF
                ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                ;---------------------------------------------------
                ; Insert your custom code below this banner
                ; to modify the way a master might read RAM data to send
                ; to an I2C device
                ; By replacing the section from here down to the next block
                ; a user could process data for a custom I2C READ application
                ;---------------------------------------------------
 00EB           ReadOutData:
 00EB              ;read the current data byte
                IF SYSTEM_LARGE_MEMORY_MODEL
 00EB 5105         mov   A, [pI2CHW_1_Read_BufHI]
                ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00ED 60D3            mov reg[IDX_PP], A
                   ENDIF
 00EF 5806         mov   X, [pI2CHW_1_Read_BufLO]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00F1 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 00F3 7180            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
 00F5 5200         mov   A, [X]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00F7 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 00F9 7100            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_00b
                   ENDIF
 00FB 60D8         mov   reg[I2CHW_1_DR], A
 00FD 7A08         dec   [I2CHW_1_Read_Count]
 00FF           
 00FF C00E         jc    MstrWRComplete
 0101 7606         inc   [pI2CHW_1_Read_BufLO]
 0103 8001         jmp   I2CNormalOutput
 0105           ;
 0105           ;ram read overflow detected here, just resend the last location in the buffer
 0105           ;
 0105           ;********        THERE SHOULD BE NO WAY TO OVERFLOW FOR THIS CASE
 0105           ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
 0105           ;
 0105           ;RamRDOverflow:
 0105           ;   or    [I2CHW_1_RsrcStatus], I2CHW_RD_OVERFLOW
 0105           ;   inc   [I2CHW_1_Read_Count]                                       ; set back to zero
 0105           
 0105           ;---------------------------------------------------
 0105           ; End user I2C MASTER WRITE TO SLAVE /READ buffer customization section
 0105           ; Insert your custom code above this banner
 0105           ;---------------------------------------------------
 0105           ;@PSoC_UserCode_END@ (Do not change this line.)
 0105           ;;code snipped form SW I2C to maintain api compatibility above
 0105           I2CNormalOutput:
 0105           
 0105                   ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
 0105                   ;and place there based on whether or not the previous transmission was our I2C address.
 0105 18                pop   A
 0106           
 0106           ;
 0106           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 0106           ;
                IF I2CHW_1_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[0xD7], A               ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0106 60D7              mov   reg[0xD7], A               ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
 0108 18           pop   A
 0109 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 010B 20            pop X
 010C 18            pop A
 010D 7E            reti ;return and wait for the next interrupt (on data)
 010E           
 010E           MstrWRComplete:
 010E 26018F       and   [I2CHW_1_RsrcStatus], ~0x70                                 ;clear the write status bits
 0111 2E0140       or    [I2CHW_1_RsrcStatus], I2CHW_WR_COMPLETE
 0114 2E0110       or    [I2CHW_1_RsrcStatus], I2CHW_WR_NOERR
 0117           
 0117           
 0117           
 0117                   ; *****
 0117                   ; here we may need to look at the mode that this was called under
 0117                   ; what does the user want done on the last byte.  Could be a send restart...
 0117                   ; ******
 0117 260003            and [I2CHW_1_bStatus], (I2CHW_1_RepStart | I2CHW_1_NoStop)
 011A A00B              jz      CompleteWRXfer
 011C 18                pop  A                                                            ;clear the stack for return
 011D 26017F            and  [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
 0120           
                IF SYSTEM_LARGE_MEMORY_MODEL
 0120 18           pop   A
 0121 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 0123 20            pop X
 0124 18            pop A
 0125 7E            reti
 0126                   ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
 0126                   ; The release of the I2C_TX bit in I2C_SCR below will automatically generate a stop
 0126           
 0126           CompleteWRXfer:
 0126           
 0126 18           pop   A
 0127           
 0127           ;
 0127           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 0127           ;
                IF I2CHW_1_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[0xD7], 0               ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0127 62D700            mov   reg[0xD7], 0               ; write data to reg[I2C_SCR]
                ENDIF
                
 012A 26017F       and  [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
                IF SYSTEM_LARGE_MEMORY_MODEL
 012D 18           pop   A
 012E 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 0130 20           pop X
 0131 18           pop A
 0132 7E           reti
 0133           
 0133           SlaveDataNAK:
 0133           ;must also fix up the data buffer.  While it is marginally safe to nak a byte as a slave and 
 0133           ;store it.  It is NEVER safe as a master to notice that a written byte has been nak'ed by a 
 0133           ;slave and fail to resend it.
 0133           ;this piece of code fixes up the count and buffer that the master is using to get data from
 0133           ;to re-transmit the byte when the next master write is done.
 0133 7608          inc  [I2CHW_1_Read_Count]                          ;calc addr lsb
                IF I2CHW_1_READ_FLASH
 0135 D003          jnc  NoIncHighCount
 0137 7607          inc  [I2CHW_1_Read_CountHI]
 0139           
 0139           NoIncHighCount:
                ENDIF
 0139 7A06          dec  [pI2CHW_1_Read_BufLO]                         ;set the next flash address to read
                IF SYSTEM_LARGE_MEMORY_MODEL
 013B D003          jnc  NoDecHiAddr
 013D 7A05          dec  [pI2CHW_1_Read_BufHI]
 013F           NoDecHiAddr:
                ELSE
                IF I2CHW_1_READ_FLASH
                    jnc  NoDecHiCAddr
                    dec  [pI2CHW_1_Read_BufHI]
                NoDecHiCAddr:
                ENDIF
                ENDIF
                
                    ;;
                    ;; all there is to do here is to return & set status, the slave didn't want any more data
                    ;;
                        ;no pop needed because the nak is detected before the push happens above
                
                ;
                ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                ;
                IF I2CHW_1_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[0xD7], 0               ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 013F 62D700            mov   reg[0xD7], 0               ; write data to reg[I2C_SCR]
                ENDIF
                
                
                
 0142 26017F            and [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
 0145 26018F        and   [I2CHW_1_RsrcStatus], ~0x70                                ;clear the write status bits
 0148 2E0140        or    [I2CHW_1_RsrcStatus], I2CHW_WR_COMPLETE
 014B 2E0120        or    [I2CHW_1_RsrcStatus], I2CHW_WR_OVERFLOW
                IF SYSTEM_LARGE_MEMORY_MODEL
 014E 18           pop   A
 014F 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 0151 20            pop X
 0152 18            pop A
 0153 7E           reti
 0154           
 0154           STOPTRAP:
 0154               ;
 0154               ;   If interrupt on STOP condition is enabled:
 0154               ;   Add user code to process stop (not recommended becuase I2C bus is NOT stalled and ISR
 0154                   ;   may block reception of ongoing transactions/addresses
 0154                   ;   STOP condition is never detected when a repeat start is used by the master.
 0154                   ;
 0154 26017F        and [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
                IF SYSTEM_LARGE_MEMORY_MODEL
 0157 18           pop   A
 0158 60D3         mov   reg[ IDX_PP ], A
                ENDIF
 015A 20            pop X
 015B 18            pop A
 015C 7E            reti
 015D           
 015D           ; end of file I2CHW_1INT.asm
